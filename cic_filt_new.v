// cic filter with satuation and verilog formation
//
//

//&ModuleBeg ;
module cic_filt(
//This file was generated by verigen, please don't remove this comment line!
clk,
data_in,
decimation,
rst,
data_out,
data_out_en) ;

parameter CIC_N = 5 ;

//input definition list begin, please don't remove this comment line!
input        clk ;
input [47:0] data_in ;
input [7:0] decimation ;
input        rst ;
//end of input definition list, please don't remove this comment line!

//output definition list begin, please don't remove this comment line!
output [47:0] data_out ;
output        data_out_en ;
//end of output definition list, please don't remove this comment line!

//inout definition list begin, please don't remove this comment line!
//end of inout definition list, please don't remove this comment line!

// module registers definition
reg [47:0] data_out ;
reg [7:0] decimation_counter ;
reg [63:0] differentiator_0_regs ;
reg [63:0] differentiator_0_regs_z ;
reg [63:0] differentiator_1_regs_z ;
reg [63:0] differentiator_2_regs_z ;
reg [63:0] differentiator_3_regs_z ;
reg [63:0] differentiator_4_regs_z ;
reg        differentiator_en ;
reg        differentiator_en_1d ;
reg        differentiator_en_2d ;
reg [63:0] integrator_0_reg ;
reg [63:0] integrator_1_reg ;
reg [63:0] integrator_2_reg ;
reg [63:0] integrator_3_reg ;
reg [63:0] integrator_4_reg ;
reg [63:0] integrator_5_reg ;
reg [63:0] differentiator_2_substract_1d ;

// module wires definition
wire        data_out_en ;
wire [47:0] data_out_nxt ;
wire [63:0] differentiator_0_regs_v ;
wire [63:0] differentiator_0_substract ;
wire [63:0] differentiator_1_regs_v ;
wire [63:0] differentiator_1_substract ;
wire [63:0] differentiator_2_regs_v ;
wire [63:0] differentiator_2_substract ;
wire [63:0] differentiator_3_regs_v ;
wire [63:0] differentiator_3_substract ;
wire [63:0] differentiator_4_regs_v ;
reg   [63:0] differentiator_4_regs_v_1d ;
wire [63:0] differentiator_4_substract ;
wire [63:0] integrator_0_accumulate ;
wire [63:0] integrator_1_accumulate ;
wire [63:0] integrator_2_accumulate ;
wire [63:0] integrator_3_accumulate ;
wire [63:0] integrator_4_accumulate ;
wire [63:0] integrator_5_accumulate ;
wire        minus_satuation_enable ;
wire        plus_satuation_enable ;



//parameter CIC_N = 5 ;

assign integrator_0_accumulate[63:0] = {{16{data_in[47]}},data_in[47:0]} + integrator_0_reg[63:0] ;
assign integrator_1_accumulate[63:0] = integrator_0_reg[63:0] + integrator_1_reg[63:0] ;
assign integrator_2_accumulate[63:0] = integrator_1_reg[63:0] + integrator_2_reg[63:0] ;
assign integrator_3_accumulate[63:0] = integrator_2_reg[63:0] + integrator_3_reg[63:0] ;
assign integrator_4_accumulate[63:0] = integrator_3_reg[63:0] + integrator_4_reg[63:0] ;
assign integrator_5_accumulate[63:0] = integrator_4_reg[63:0] + integrator_5_reg[63:0] ;

// assign integrator_0_add[63:0] = (integrator_0_accumulate[48:63] == 2'b10) ?  48'h800000000000 : (integrator_0_accumulate[48:63] == 2'b01) ? 48'h7fffffffffff : integrator_0_accumulate[63:0] ;
// assign integrator_1_add[63:0] = (integrator_1_accumulate[48:63] == 2'b10) ?  48'h800000000000 : (integrator_1_accumulate[48:63] == 2'b01) ? 48'h7fffffffffff : integrator_1_accumulate[63:0] ;
// assign integrator_2_add[63:0] = (integrator_2_accumulate[48:63] == 2'b10) ?  48'h800000000000 : (integrator_2_accumulate[48:63] == 2'b01) ? 48'h7fffffffffff : integrator_2_accumulate[63:0] ;
// assign integrator_3_add[63:0] = (integrator_3_accumulate[48:63] == 2'b10) ?  48'h800000000000 : (integrator_3_accumulate[48:63] == 2'b01) ? 48'h7fffffffffff : integrator_3_accumulate[63:0] ;
// assign integrator_4_add[63:0] = (integrator_4_accumulate[48:63] == 2'b10) ?  48'h800000000000 : (integrator_4_accumulate[48:63] == 2'b01) ? 48'h7fffffffffff : integrator_4_accumulate[63:0] ;
// assign integrator_5_add[63:0] = (integrator_5_accumulate[48:63] == 2'b10) ?  48'h800000000000 : (integrator_5_accumulate[48:63] == 2'b01) ? 48'h7fffffffffff : integrator_5_accumulate[63:0] ;

// assign integrator_0_add[63:0] = integrator_0_accumulate[63:0] ;
// assign integrator_1_add[63:0] = integrator_1_accumulate[63:0] ;
// assign integrator_2_add[63:0] = integrator_2_accumulate[63:0] ;
// assign integrator_3_add[63:0] = integrator_3_accumulate[63:0] ;
// assign integrator_4_add[63:0] = integrator_4_accumulate[63:0] ;
// assign integrator_5_add[63:0] = integrator_5_accumulate[63:0] ;


always @ (posedge clk or posedge rst) begin
  if(rst) begin
    integrator_0_reg[63:0] <= 64'd0 ;
    integrator_1_reg[63:0] <= 64'd0 ;
    integrator_2_reg[63:0] <= 64'd0 ;
    integrator_3_reg[63:0] <= 64'd0 ;
    integrator_4_reg[63:0] <= 64'd0 ;
    integrator_5_reg[63:0] <= 64'd0 ;
  end
  else begin
    integrator_0_reg[63:0] <= integrator_0_accumulate[63:0] ;
    integrator_1_reg[63:0] <= integrator_1_accumulate[63:0] ;
    integrator_2_reg[63:0] <= integrator_2_accumulate[63:0] ;
    integrator_3_reg[63:0] <= integrator_3_accumulate[63:0] ;
    integrator_4_reg[63:0] <= integrator_4_accumulate[63:0] ;
    integrator_5_reg[63:0] <= integrator_5_accumulate[63:0] ;
  end
end
//&SequEnd ;
//`define CLK160MHZ

// decimation
always @ (posedge clk or posedge rst)
begin
  if(rst) begin
`ifdef CLK160MHZ
    decimation_counter[7:0] <= {decimation[6:0],1'b1} ;
`else    
    decimation_counter[7:0] <= decimation[7:0] ;
`endif
    differentiator_en       <= 1'b0 ;
  end
  else if(decimation_counter[7:0] == 8'd0) begin
    differentiator_en <= 1'b1 ;
`ifdef CLK160MHZ
    decimation_counter[7:0] <= {decimation[6:0],1'b1} ;
`else    
    decimation_counter[7:0] <= decimation[7:0] ;
`endif
  end
  else begin
    decimation_counter[7:0] <= decimation_counter[7:0] - 1'b1 ;
    differentiator_en <= 1'b0 ;
  end
end
//&SequEnd ;


assign differentiator_0_substract[63:0] = differentiator_0_regs[63:0]   - differentiator_0_regs_z[63:0] ;
assign differentiator_1_substract[63:0] = differentiator_0_regs_v[63:0] - differentiator_1_regs_z[63:0] ;
assign differentiator_2_substract[63:0] = differentiator_1_regs_v[63:0] - differentiator_2_regs_z[63:0] ;
assign differentiator_3_substract[63:0] = differentiator_2_regs_v[63:0] - differentiator_3_regs_z[63:0] ;
assign differentiator_4_substract[63:0] = differentiator_3_regs_v[63:0] - differentiator_4_regs_z[63:0] ;

assign differentiator_0_regs_v[63:0] = differentiator_0_substract[63:0] ;
assign differentiator_1_regs_v[63:0] = differentiator_1_substract[63:0] ;

assign differentiator_2_regs_v[63:0] = differentiator_2_substract_1d[63:0] ;
assign differentiator_3_regs_v[63:0] = differentiator_3_substract[63:0] ;
assign differentiator_4_regs_v[63:0] = differentiator_4_substract[63:0] ;

// differentiator
always @ (posedge clk or posedge rst)
begin
  if(rst) begin
    differentiator_0_regs[63:0]   <= 64'd0 ;
//   differentiator_1_regs[63:0]   <= 48'd0 ;
//   differentiator_2_regs[63:0]   <= 48'd0 ;
    differentiator_2_substract_1d[63:0]   <= 64'd0 ;

    differentiator_0_regs_z[63:0] <= 64'd0 ;
    differentiator_1_regs_z[63:0] <= 64'd0 ;
    differentiator_2_regs_z[63:0] <= 64'd0 ;
    differentiator_3_regs_z[63:0] <= 64'd0 ;
    differentiator_4_regs_z[63:0] <= 64'd0 ;
    differentiator_4_regs_v_1d[63:0] <= 64'd0 ;
    data_out[47:0] <= 48'd0 ;
  end
  else begin
    differentiator_2_substract_1d[63:0] <= differentiator_2_substract[63:0] ;
    differentiator_4_regs_v_1d[63:0] <= differentiator_4_regs_v[63:0] ;
    if(differentiator_en) begin
      differentiator_0_regs[63:0] <= integrator_4_reg[63:0] ;

      differentiator_0_regs_z[63:0] <= differentiator_0_regs[63:0] ;

      differentiator_1_regs_z[63:0] <= differentiator_0_regs_v[63:0] ;

      differentiator_2_regs_z[63:0] <= differentiator_1_regs_v[63:0] ;
    end
    else if(differentiator_en_1d) begin
      differentiator_3_regs_z[63:0] <= differentiator_2_regs_v[63:0] ;
      differentiator_4_regs_z[63:0] <= differentiator_3_regs_v[63:0] ;
    end
    else if(differentiator_en_2d) begin
      data_out[47:0] <= data_out_nxt[47:0] ;
    end
  end
end
//&SequEnd ;
//

always @ (posedge clk or posedge rst)
begin
  if(rst) begin
    differentiator_en_1d <= 1'b0 ;
    differentiator_en_2d <= 1'b0 ;
  end
  else begin
    differentiator_en_1d <= differentiator_en ;
    differentiator_en_2d <= differentiator_en_1d ;
  end
end

assign data_out_en = differentiator_en_2d ;

assign minus_satuation_enable = differentiator_4_regs_v_1d[63] ? (differentiator_4_regs_v_1d[62:41] < 22'h3fffc1) : 1'b0 ;
assign plus_satuation_enable  = differentiator_4_regs_v_1d[63] ? 1'b0 : (differentiator_4_regs_v_1d[62:41] > 22'h00003e) ;

//assign differentiator_4_regs_v_mi[47:0] = (differentiator_4_regs_v_1d[63:47] == 17'h1ffff) ? differentiator_4_regs_v_1d[47:0] : 48'h800000000000 ;
//assign differentiator_4_regs_v_pl[47:0] = (differentiator_4_regs_v[63:47] == 17'h00000) ? differentiator_4_regs_v_1d[47:0] : 48'h7fffffffffff ;

//assign data_out_nxt[47:0] = differentiator_4_regs_v_1d[63] ? differentiator_4_regs_v_mi[47:0] : differentiator_4_regs_v_pl[47:0] ;
assign data_out_nxt[47:0] = minus_satuation_enable ? 48'h820000000000 : plus_satuation_enable ? 48'h7dffffffffff : differentiator_4_regs_v_1d[47:0] ;


//&ModuleEnd ;

endmodule
